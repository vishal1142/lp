version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: jira-postgres
    environment:
      POSTGRES_DB: jiradb
      POSTGRES_USER: jirauser
      POSTGRES_PASSWORD: jira_password
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jira-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jirauser -d jiradb"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  jira:
    image: atlassian/jira-software:9.4.0
    container_name: jira-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - JIRA_HOME=/var/atlassian/application-data/jira
      - JIRA_DATABASE_URL=jdbc:postgresql://postgres:5432/jiradb
      - JIRA_DB_USER=jirauser
      - JIRA_DB_PASSWORD=jira_password
      - JVM_MINIMUM_MEMORY=1024m
      - JVM_MAXIMUM_MEMORY=2048m
      - JVM_SUPPORT_RECOMMENDED_ARGS=-Djava.awt.headless=true
      - ATL_TOMCAT_PORT=8082  # Internal container port
    volumes:
      - jira_data:/var/atlassian/application-data/jira
      - jira_plugins:/opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins
      - jira_logs:/opt/atlassian/jira/logs
    ports:
      - "8082:8082"  # Host:Container port mapping
    networks:
      - jira-network
    restart: unless-stopped

volumes:
  postgres_data:
  jira_data:
  jira_plugins:
  jira_logs:

networks:
  jira-network:
    driver: bridge

# Note: The following URLs are examples and should be replaced with actual values based on your setup.
#http://localhost:8081 #Jira URL
#http://localhost:8081/login.jsp #Jira login page
#http://localhost:8081/secure/admin/ConfigureApplication!default.jspa #Jira admin page
#http://localhost:8081/secure/admin/ConfigureUserServer!default.jspa #Jira user management page
#http://localhost:8081/secure/admin/ConfigureGroupServer!default.jspa #Jira group management page
#postgres://jirauser:jira_password@localhost:5432/jiradb #PostgreSQL connection string
#http://localhost:8081/secure/admin/ConfigureUserServer!default.jspa #Jira user management page 
#http://localhost:8081/secure/admin/ConfigureGroupServer!default.jspa #Jira group management page
#http://localhost:8081/secure/admin/ConfigureApplication!default.jspa #Jira admin page
## Create and start all containers in detached mode
# docker-compose -f docker-compose2.yml up -d
## Check status of all containers
# docker-compose -f docker-compose2.yml ps
# Check the logs of a specific container (e.g., Jira)
# docker-compose -f docker-compose2.yml logs -f jira
# Check the logs of a specific container (e.g., PostgreSQL)
# docker-compose -f docker-compose2.yml logs -f postgres  
# Check the logs of all containers
# docker-compose -f docker-compose2.yml logs -f
# Check the logs of all containers with timestamps
# docker-compose -f docker-compose2.yml logs -f --timestamps
# Check the logs of all containers with timestamps and follow mode
# docker-compose -f docker-compose2.yml logs -f --timestamps --follow 
# Check the logs of all containers with timestamps and follow mode, and limit to 100 lines
# docker-compose -f docker-compose2.yml logs -f --timestamps --follow --tail=100
# Check the logs of all containers with timestamps and follow mode, and limit to 100 lines, and show only errors
# docker-compose -f docker-compose2.yml logs -f --timestamps --follow --tail=100 --filter "error"
# Check the logs of all containers with timestamps and follow mode, and limit to 100 lines, and show only warnings
# docker-compose -f docker-compose2.yml logs -f --timestamps --follow --tail=100 --filter "warning"
# Alternative: View all containers with status and ports
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=running"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=exited"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=created"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=paused"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=dead"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=removing"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=stopped"
# docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=postgres" --filter "name=jira" --filter "status=all"


